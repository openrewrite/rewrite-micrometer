# Copyright 2025 the original author or authors.
# <p>
# Licensed under the Moderne Source Available License (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# <p>
# https://docs.moderne.io/licensing/moderne-source-available-license
# <p>
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.micrometer.TimerToObservation
examples:
- description: '`TimerToObservationTest#recordRunnable`'
  sources:
  - before: |
      import io.micrometer.core.instrument.MeterRegistry;
      import io.micrometer.core.instrument.Timer;

      class Test {
          private MeterRegistry registry;

          void test(Runnable arg) {
              Timer.builder("my.timer")
                      .register(registry)
                      .record(arg);
          }
      }
    after: |
      import io.micrometer.observation.Observation;
      import io.micrometer.observation.ObservationRegistry;

      class Test {
          private ObservationRegistry registry;

          void test(Runnable arg) {
              Observation.createNotStarted("my.timer", registry)
                      .observe(arg);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.micrometer.UpgradeMicrometer
examples:
- description: '`Dependencies#maven`'
  sources:
  - before: |
      <?xml version="1.0" encoding="UTF-8"?>
      <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.example</groupId>
        <artifactId>demo</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <dependencies>
          <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-core</artifactId>
            <version>1.10.10</version>
          </dependency>
        </dependencies>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.micrometer.UpgradeMicrometer_1_13
examples:
- description: '`UpgradeMicrometer13Test#shouldChangePackage`'
  sources:
  - before: |
      import io.micrometer.prometheus.PrometheusConfig;
      import io.micrometer.prometheus.PrometheusMeterRegistry;

      class MicrometerConfig {
          PrometheusMeterRegistry prometheusMeterRegistry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);
      }
    after: |
      import io.micrometer.prometheusmetrics.PrometheusConfig;
      import io.micrometer.prometheusmetrics.PrometheusMeterRegistry;

      class MicrometerConfig {
          PrometheusMeterRegistry prometheusMeterRegistry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.micrometer.dropwizard.FindDropwizardMetrics
examples:
- description: '`FindDropwizardMetricsTest#findDropwizardMetrics`'
  sources:
  - before: |
      import com.codahale.metrics.MetricRegistry;

      class Test {
         void instrument(MetricRegistry registry) {
             registry.counter("my.counter");
             registry.gauge("my.gauge");
         }
      }
    after: |
      import com.codahale.metrics.MetricRegistry;

      class Test {
         void instrument(MetricRegistry registry) {
             /*~~(Counter)~~>*/registry.counter("my.counter");
             /*~~(Gauge)~~>*/registry.gauge("my.gauge");
         }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.micrometer.misk.MigrateEmptyLabelMiskCounter
examples:
- description: '`MigrateEmptyLabelMiskCounterTest#migrateEmptyLabel`'
  sources:
  - before: |
      import misk.metrics.v2.Metrics;
      import static kotlin.collections.CollectionsKt.listOf;

      class Test {
        void test(Metrics metrics) {
            metrics.counter("counter", "description", listOf());
        }
      }
    after: |
      import io.micrometer.core.instrument.Counter;
      import misk.metrics.v2.Metrics;
      import static kotlin.collections.CollectionsKt.listOf;

      class Test {
        void test(Metrics metrics) {
            Counter.builder("counter").description("description").register(Metrics.globalRegistry);
        }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.micrometer.misk.NoExplicitEmptyLabelList
examples:
- description: '`NoExplicitEmptyLabelListTest#emptyLabel`'
  sources:
  - before: |
      import misk.metrics.v2.Metrics;
      import static kotlin.collections.CollectionsKt.listOf;

      class Test {
        void test(Metrics metrics) {
            metrics.counter("counter", "description", listOf());
            metrics.gauge("gauge", "description", listOf());
            metrics.peakGauge("peakGauge", "description", listOf());
        }
      }
    after: |
      import misk.metrics.v2.Metrics;
      import static kotlin.collections.CollectionsKt.listOf;

      class Test {
        void test(Metrics metrics) {
            metrics.counter("counter", "description");
            metrics.gauge("gauge", "description");
            metrics.peakGauge("peakGauge", "description");
        }
      }
    language: java
